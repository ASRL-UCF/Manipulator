CREATING A BETTER MOVE

GOAL: TRAJECTORY TRACKING 

	read about vector value function again
	given a z value timestamps, reach those points using a function/trajectory tracking.
	
	start point is already on function that it wants to track.
	
	HOW TO MODIFY:
	callback function?
	input of the function what gets inputted in the script and what gets called to calc kinematics
	
	
IMPLEMENTATION?

	for linear updown, must give height brackets & period time: 
		once you start the program, depending on were its at, all other factors are fixed: x,y pos & yaw,pitch,roll fixed.
	
		calculation based on [lower]*cos(wt)+[upper-lower]
		calculation for period = 2pi/[new period] = w
		
		ex
		upper = 600
		lower = 200
		new period = 8pi
		
		going from the top at 600mm to 200 mm at a period of 8pi
		200cos(1/4*x)+400	
	
		based on this period speed, calcs for the motor speeds and kinematics must be given.
		
		calc motor speed?
		
		how does inv kinematics calc and move to a position?
		
		also zjogneg/pos - this is the one you probably want to do/ use - also look at the ar2 2.0 files to see how he moves linearly
		
NOTES:

	runProg() runs the program like you press the play button
	stopProg() stops the program like you press the stop button
	
	executeRow() runs the line in the loaded program
	MoveXYZ(CX,CY,CZ,CRx,CRy,CRz,newSpeed,ACCdur,ACCspd,DECdur,DECspd,WC,TCX,TCY,TCZ,TCRx,TCRy,TCRz,Track) calls
		 CalcRevKin
		 MoveNew
		 
	CalXYZ(CX,CY,CZ,CRx,CRy,CRz,newSpeed,ACCdur,ACCspd,DECdur,DECspd,WC,TCX,TCY,TCZ,TCRx,TCRy,TCRz,Track) calls
		CalcRevKin(CX,CY,CZ,CRx,CRy,CRz,WC,TCX,TCY,TCZ,TCRx,TCRy,TCRz)
		CalNew(J1out,J2out,J3out,J4out,J5out,J6out,newSpeed,ACCdur,ACCspd,DECdur,DECspd,Track)  
		
	J#jogpos/neg shows how the motors get jogged and how the program saves the data/what is accessed and calculated.
	
	ACCspeedField.get() - example of getting values from field
	
	
	
	2.0 stuff
	
		look at if (cmdType == "Move L"):
			CalcLinDist ? - what does this do/ how does it work with CalcLinVect
			
			XcurPos
			YcurPos
			ZcurPos
			RxcurPos
			etc.
			
			this is how you get the current positions for the arm/variables stored
			
	TO FIND THE TIME CONSTRAINT
		way point/time step
		
		at time 0 you have set xyz
		
		at time t - you have a required xyz
		find the velocity using inverse kinematics between these points.
			finding the velocity between the two positions, knowing/ learning the velocity gives the time becasue you are already dividing by the required time.
			
			
			
			
			
			

MOVING THE ARM
	ARDUINO SKETCH
	~line 1177
		Right now, the arm drives look like this
	
**************************************************************************************************	
	
	  float AdjSpeed = (SpeedIn / 100);
		//REG SPEED
		float LspeedAdj = 2;
		float CalcRegSpeed = ((SpeedMult * LspeedAdj) / AdjSpeed);
		int curDelay = int(CalcRegSpeed)/6;


		///// DRIVE MOTORS /////
		while (J1cur < J1step || J2cur < J2step || J3cur < J3step || J4cur < J4step || J5cur < J5step || J6cur < J6step || TRcur < TRstep)
		{

			/////// J1 ////////////////////////////////
			if (J1cur < J1step)
			{
			J1cur = ++J1cur;
			digitalWrite(J1stepPin, LOW);
			delayMicroseconds(curDelay);
			digitalWrite(J1stepPin, HIGH);
			}
	
***************************************************************************************************

	speedin is some motor speed %
	
	i will be given 6 theta dots,
		supply speeds to speeds and motor step differences, 
		
		
	stepsize delta/motorspeed = theta dots
	
	
		find the max speed the motors run at
	
			
			
		digital write fast arduino
			look to see if we can change the digital writes to be faster
			
	in order to do this, we'll need to change the code so that 
		we have input for 6 theta dots
		6 different time frames that the arm will move
		6 different steps that the movement will move through
			
			


	steps per 360 degrees
	
	J1 - 200 - 200*360/2pi = ~11,459.165581759554875079179651068â€¬ steps per rads 
	J2 - 200 - ...
	J3 - 200 - ...
	J4 - 200 -...
	J5 - 200 - ....
	J6 - 200 -....
	
	each motor can move in - 0.017453 rads intervals
	
	
	
	given a theta dot
		thetad1 = .20 //rads per sec
		
		//we need to know the amount of steps the motors will run through
		
		//thetad1/steps1 = seconds
		
		
		
		